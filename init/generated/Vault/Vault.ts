// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get assets(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class DepositRequest extends ethereum.Event {
  get params(): DepositRequest__Params {
    return new DepositRequest__Params(this);
  }
}

export class DepositRequest__Params {
  _event: DepositRequest;

  constructor(event: DepositRequest) {
    this._event = event;
  }

  get controller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get requestId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get assets(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class DepositRequestCanceled extends ethereum.Event {
  get params(): DepositRequestCanceled__Params {
    return new DepositRequestCanceled__Params(this);
  }
}

export class DepositRequestCanceled__Params {
  _event: DepositRequestCanceled;

  constructor(event: DepositRequestCanceled) {
    this._event = event;
  }

  get requestId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get controller(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class DepositSync extends ethereum.Event {
  get params(): DepositSync__Params {
    return new DepositSync__Params(this);
  }
}

export class DepositSync__Params {
  _event: DepositSync;

  constructor(event: DepositSync) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get assets(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class FeeReceiverUpdated extends ethereum.Event {
  get params(): FeeReceiverUpdated__Params {
    return new FeeReceiverUpdated__Params(this);
  }
}

export class FeeReceiverUpdated__Params {
  _event: FeeReceiverUpdated;

  constructor(event: FeeReceiverUpdated) {
    this._event = event;
  }

  get oldReceiver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newReceiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class HighWaterMarkUpdated extends ethereum.Event {
  get params(): HighWaterMarkUpdated__Params {
    return new HighWaterMarkUpdated__Params(this);
  }
}

export class HighWaterMarkUpdated__Params {
  _event: HighWaterMarkUpdated;

  constructor(event: HighWaterMarkUpdated) {
    this._event = event;
  }

  get oldHighWaterMark(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newHighWaterMark(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class NewTotalAssetsUpdated extends ethereum.Event {
  get params(): NewTotalAssetsUpdated__Params {
    return new NewTotalAssetsUpdated__Params(this);
  }
}

export class NewTotalAssetsUpdated__Params {
  _event: NewTotalAssetsUpdated;

  constructor(event: NewTotalAssetsUpdated) {
    this._event = event;
  }

  get totalAssets(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OperatorSet extends ethereum.Event {
  get params(): OperatorSet__Params {
    return new OperatorSet__Params(this);
  }
}

export class OperatorSet__Params {
  _event: OperatorSet;

  constructor(event: OperatorSet) {
    this._event = event;
  }

  get controller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class OwnershipTransferStarted extends ethereum.Event {
  get params(): OwnershipTransferStarted__Params {
    return new OwnershipTransferStarted__Params(this);
  }
}

export class OwnershipTransferStarted__Params {
  _event: OwnershipTransferStarted;

  constructor(event: OwnershipTransferStarted) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RatesUpdated extends ethereum.Event {
  get params(): RatesUpdated__Params {
    return new RatesUpdated__Params(this);
  }
}

export class RatesUpdated__Params {
  _event: RatesUpdated;

  constructor(event: RatesUpdated) {
    this._event = event;
  }

  get oldRates(): RatesUpdatedOldRatesStruct {
    return changetype<RatesUpdatedOldRatesStruct>(
      this._event.parameters[0].value.toTuple(),
    );
  }

  get newRate(): RatesUpdatedNewRateStruct {
    return changetype<RatesUpdatedNewRateStruct>(
      this._event.parameters[1].value.toTuple(),
    );
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RatesUpdatedOldRatesStruct extends ethereum.Tuple {
  get managementRate(): i32 {
    return this[0].toI32();
  }

  get performanceRate(): i32 {
    return this[1].toI32();
  }
}

export class RatesUpdatedNewRateStruct extends ethereum.Tuple {
  get managementRate(): i32 {
    return this[0].toI32();
  }

  get performanceRate(): i32 {
    return this[1].toI32();
  }
}

export class RedeemRequest extends ethereum.Event {
  get params(): RedeemRequest__Params {
    return new RedeemRequest__Params(this);
  }
}

export class RedeemRequest__Params {
  _event: RedeemRequest;

  constructor(event: RedeemRequest) {
    this._event = event;
  }

  get controller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get requestId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get shares(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Referral extends ethereum.Event {
  get params(): Referral__Params {
    return new Referral__Params(this);
  }
}

export class Referral__Params {
  _event: Referral;

  constructor(event: Referral) {
    this._event = event;
  }

  get referral(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get requestId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get assets(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SettleDeposit extends ethereum.Event {
  get params(): SettleDeposit__Params {
    return new SettleDeposit__Params(this);
  }
}

export class SettleDeposit__Params {
  _event: SettleDeposit;

  constructor(event: SettleDeposit) {
    this._event = event;
  }

  get epochId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get settledId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalAssets(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalSupply(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get assetsDeposited(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get sharesMinted(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class SettleRedeem extends ethereum.Event {
  get params(): SettleRedeem__Params {
    return new SettleRedeem__Params(this);
  }
}

export class SettleRedeem__Params {
  _event: SettleRedeem;

  constructor(event: SettleRedeem) {
    this._event = event;
  }

  get epochId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get settledId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalAssets(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalSupply(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get assetsWithdrawed(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get sharesBurned(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class StateUpdated extends ethereum.Event {
  get params(): StateUpdated__Params {
    return new StateUpdated__Params(this);
  }
}

export class StateUpdated__Params {
  _event: StateUpdated;

  constructor(event: StateUpdated) {
    this._event = event;
  }

  get state(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class TotalAssetsLifespanUpdated extends ethereum.Event {
  get params(): TotalAssetsLifespanUpdated__Params {
    return new TotalAssetsLifespanUpdated__Params(this);
  }
}

export class TotalAssetsLifespanUpdated__Params {
  _event: TotalAssetsLifespanUpdated;

  constructor(event: TotalAssetsLifespanUpdated) {
    this._event = event;
  }

  get oldLifespan(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newLifespan(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TotalAssetsUpdated extends ethereum.Event {
  get params(): TotalAssetsUpdated__Params {
    return new TotalAssetsUpdated__Params(this);
  }
}

export class TotalAssetsUpdated__Params {
  _event: TotalAssetsUpdated;

  constructor(event: TotalAssetsUpdated) {
    this._event = event;
  }

  get totalAssets(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ValuationManagerUpdated extends ethereum.Event {
  get params(): ValuationManagerUpdated__Params {
    return new ValuationManagerUpdated__Params(this);
  }
}

export class ValuationManagerUpdated__Params {
  _event: ValuationManagerUpdated;

  constructor(event: ValuationManagerUpdated) {
    this._event = event;
  }

  get oldManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newManager(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class WhitelistDisabled extends ethereum.Event {
  get params(): WhitelistDisabled__Params {
    return new WhitelistDisabled__Params(this);
  }
}

export class WhitelistDisabled__Params {
  _event: WhitelistDisabled;

  constructor(event: WhitelistDisabled) {
    this._event = event;
  }
}

export class WhitelistManagerUpdated extends ethereum.Event {
  get params(): WhitelistManagerUpdated__Params {
    return new WhitelistManagerUpdated__Params(this);
  }
}

export class WhitelistManagerUpdated__Params {
  _event: WhitelistManagerUpdated;

  constructor(event: WhitelistManagerUpdated) {
    this._event = event;
  }

  get oldManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newManager(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class WhitelistUpdated extends ethereum.Event {
  get params(): WhitelistUpdated__Params {
    return new WhitelistUpdated__Params(this);
  }
}

export class WhitelistUpdated__Params {
  _event: WhitelistUpdated;

  constructor(event: WhitelistUpdated) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get authorized(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get assets(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Vault__feeRatesResultValue0Struct extends ethereum.Tuple {
  get managementRate(): i32 {
    return this[0].toI32();
  }

  get performanceRate(): i32 {
    return this[1].toI32();
  }
}

export class Vault__getRolesStorageResult_rolesStorageStruct extends ethereum.Tuple {
  get whitelistManager(): Address {
    return this[0].toAddress();
  }

  get feeReceiver(): Address {
    return this[1].toAddress();
  }

  get safe(): Address {
    return this[2].toAddress();
  }

  get feeRegistry(): Address {
    return this[3].toAddress();
  }

  get valuationManager(): Address {
    return this[4].toAddress();
  }
}

export class Vault extends ethereum.SmartContract {
  static bind(address: Address): Vault {
    return new Vault("Vault", address);
  }

  MAX_MANAGEMENT_RATE(): i32 {
    let result = super.call(
      "MAX_MANAGEMENT_RATE",
      "MAX_MANAGEMENT_RATE():(uint16)",
      [],
    );

    return result[0].toI32();
  }

  try_MAX_MANAGEMENT_RATE(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "MAX_MANAGEMENT_RATE",
      "MAX_MANAGEMENT_RATE():(uint16)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  MAX_PERFORMANCE_RATE(): i32 {
    let result = super.call(
      "MAX_PERFORMANCE_RATE",
      "MAX_PERFORMANCE_RATE():(uint16)",
      [],
    );

    return result[0].toI32();
  }

  try_MAX_PERFORMANCE_RATE(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "MAX_PERFORMANCE_RATE",
      "MAX_PERFORMANCE_RATE():(uint16)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  MAX_PROTOCOL_RATE(): i32 {
    let result = super.call(
      "MAX_PROTOCOL_RATE",
      "MAX_PROTOCOL_RATE():(uint16)",
      [],
    );

    return result[0].toI32();
  }

  try_MAX_PROTOCOL_RATE(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "MAX_PROTOCOL_RATE",
      "MAX_PROTOCOL_RATE():(uint16)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)],
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, value: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value),
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  asset(): Address {
    let result = super.call("asset", "asset():(address)", []);

    return result[0].toAddress();
  }

  try_asset(): ethereum.CallResult<Address> {
    let result = super.tryCall("asset", "asset():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimSharesAndRequestRedeem(sharesToRedeem: BigInt): BigInt {
    let result = super.call(
      "claimSharesAndRequestRedeem",
      "claimSharesAndRequestRedeem(uint256):(uint40)",
      [ethereum.Value.fromUnsignedBigInt(sharesToRedeem)],
    );

    return result[0].toBigInt();
  }

  try_claimSharesAndRequestRedeem(
    sharesToRedeem: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimSharesAndRequestRedeem",
      "claimSharesAndRequestRedeem(uint256):(uint40)",
      [ethereum.Value.fromUnsignedBigInt(sharesToRedeem)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimableDepositRequest(requestId: BigInt, controller: Address): BigInt {
    let result = super.call(
      "claimableDepositRequest",
      "claimableDepositRequest(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(requestId),
        ethereum.Value.fromAddress(controller),
      ],
    );

    return result[0].toBigInt();
  }

  try_claimableDepositRequest(
    requestId: BigInt,
    controller: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimableDepositRequest",
      "claimableDepositRequest(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(requestId),
        ethereum.Value.fromAddress(controller),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimableRedeemRequest(requestId: BigInt, controller: Address): BigInt {
    let result = super.call(
      "claimableRedeemRequest",
      "claimableRedeemRequest(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(requestId),
        ethereum.Value.fromAddress(controller),
      ],
    );

    return result[0].toBigInt();
  }

  try_claimableRedeemRequest(
    requestId: BigInt,
    controller: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimableRedeemRequest",
      "claimableRedeemRequest(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(requestId),
        ethereum.Value.fromAddress(controller),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  convertToAssets(shares: BigInt): BigInt {
    let result = super.call(
      "convertToAssets",
      "convertToAssets(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(shares)],
    );

    return result[0].toBigInt();
  }

  try_convertToAssets(shares: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "convertToAssets",
      "convertToAssets(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(shares)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  convertToAssets1(shares: BigInt, requestId: BigInt): BigInt {
    let result = super.call(
      "convertToAssets",
      "convertToAssets(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(shares),
        ethereum.Value.fromUnsignedBigInt(requestId),
      ],
    );

    return result[0].toBigInt();
  }

  try_convertToAssets1(
    shares: BigInt,
    requestId: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "convertToAssets",
      "convertToAssets(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(shares),
        ethereum.Value.fromUnsignedBigInt(requestId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  convertToShares(assets: BigInt): BigInt {
    let result = super.call(
      "convertToShares",
      "convertToShares(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(assets)],
    );

    return result[0].toBigInt();
  }

  try_convertToShares(assets: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "convertToShares",
      "convertToShares(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(assets)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  convertToShares1(assets: BigInt, requestId: BigInt): BigInt {
    let result = super.call(
      "convertToShares",
      "convertToShares(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(assets),
        ethereum.Value.fromUnsignedBigInt(requestId),
      ],
    );

    return result[0].toBigInt();
  }

  try_convertToShares1(
    assets: BigInt,
    requestId: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "convertToShares",
      "convertToShares(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(assets),
        ethereum.Value.fromUnsignedBigInt(requestId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  deposit(assets: BigInt, receiver: Address, controller: Address): BigInt {
    let result = super.call(
      "deposit",
      "deposit(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(assets),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(controller),
      ],
    );

    return result[0].toBigInt();
  }

  try_deposit(
    assets: BigInt,
    receiver: Address,
    controller: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "deposit",
      "deposit(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(assets),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(controller),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  deposit1(assets: BigInt, receiver: Address): BigInt {
    let result = super.call("deposit", "deposit(uint256,address):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(assets),
      ethereum.Value.fromAddress(receiver),
    ]);

    return result[0].toBigInt();
  }

  try_deposit1(assets: BigInt, receiver: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "deposit",
      "deposit(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(assets),
        ethereum.Value.fromAddress(receiver),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeRates(): Vault__feeRatesResultValue0Struct {
    let result = super.call("feeRates", "feeRates():((uint16,uint16))", []);

    return changetype<Vault__feeRatesResultValue0Struct>(result[0].toTuple());
  }

  try_feeRates(): ethereum.CallResult<Vault__feeRatesResultValue0Struct> {
    let result = super.tryCall("feeRates", "feeRates():((uint16,uint16))", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Vault__feeRatesResultValue0Struct>(value[0].toTuple()),
    );
  }

  getRolesStorage(): Vault__getRolesStorageResult_rolesStorageStruct {
    let result = super.call(
      "getRolesStorage",
      "getRolesStorage():((address,address,address,address,address))",
      [],
    );

    return changetype<Vault__getRolesStorageResult_rolesStorageStruct>(
      result[0].toTuple(),
    );
  }

  try_getRolesStorage(): ethereum.CallResult<Vault__getRolesStorageResult_rolesStorageStruct> {
    let result = super.tryCall(
      "getRolesStorage",
      "getRolesStorage():((address,address,address,address,address))",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Vault__getRolesStorageResult_rolesStorageStruct>(
        value[0].toTuple(),
      ),
    );
  }

  isOperator(controller: Address, operator: Address): boolean {
    let result = super.call(
      "isOperator",
      "isOperator(address,address):(bool)",
      [
        ethereum.Value.fromAddress(controller),
        ethereum.Value.fromAddress(operator),
      ],
    );

    return result[0].toBoolean();
  }

  try_isOperator(
    controller: Address,
    operator: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isOperator",
      "isOperator(address,address):(bool)",
      [
        ethereum.Value.fromAddress(controller),
        ethereum.Value.fromAddress(operator),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isTotalAssetsValid(): boolean {
    let result = super.call(
      "isTotalAssetsValid",
      "isTotalAssetsValid():(bool)",
      [],
    );

    return result[0].toBoolean();
  }

  try_isTotalAssetsValid(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTotalAssetsValid",
      "isTotalAssetsValid():(bool)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isWhitelisted(account: Address): boolean {
    let result = super.call("isWhitelisted", "isWhitelisted(address):(bool)", [
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBoolean();
  }

  try_isWhitelisted(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isWhitelisted",
      "isWhitelisted(address):(bool)",
      [ethereum.Value.fromAddress(account)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxDeposit(controller: Address): BigInt {
    let result = super.call("maxDeposit", "maxDeposit(address):(uint256)", [
      ethereum.Value.fromAddress(controller),
    ]);

    return result[0].toBigInt();
  }

  try_maxDeposit(controller: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxDeposit", "maxDeposit(address):(uint256)", [
      ethereum.Value.fromAddress(controller),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxMint(controller: Address): BigInt {
    let result = super.call("maxMint", "maxMint(address):(uint256)", [
      ethereum.Value.fromAddress(controller),
    ]);

    return result[0].toBigInt();
  }

  try_maxMint(controller: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxMint", "maxMint(address):(uint256)", [
      ethereum.Value.fromAddress(controller),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxRedeem(controller: Address): BigInt {
    let result = super.call("maxRedeem", "maxRedeem(address):(uint256)", [
      ethereum.Value.fromAddress(controller),
    ]);

    return result[0].toBigInt();
  }

  try_maxRedeem(controller: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxRedeem", "maxRedeem(address):(uint256)", [
      ethereum.Value.fromAddress(controller),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxWithdraw(controller: Address): BigInt {
    let result = super.call("maxWithdraw", "maxWithdraw(address):(uint256)", [
      ethereum.Value.fromAddress(controller),
    ]);

    return result[0].toBigInt();
  }

  try_maxWithdraw(controller: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxWithdraw",
      "maxWithdraw(address):(uint256)",
      [ethereum.Value.fromAddress(controller)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mint(shares: BigInt, receiver: Address): BigInt {
    let result = super.call("mint", "mint(uint256,address):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(shares),
      ethereum.Value.fromAddress(receiver),
    ]);

    return result[0].toBigInt();
  }

  try_mint(shares: BigInt, receiver: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mint", "mint(uint256,address):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(shares),
      ethereum.Value.fromAddress(receiver),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mint1(shares: BigInt, receiver: Address, controller: Address): BigInt {
    let result = super.call("mint", "mint(uint256,address,address):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(shares),
      ethereum.Value.fromAddress(receiver),
      ethereum.Value.fromAddress(controller),
    ]);

    return result[0].toBigInt();
  }

  try_mint1(
    shares: BigInt,
    receiver: Address,
    controller: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mint",
      "mint(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(shares),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(controller),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pendingDepositRequest(requestId: BigInt, controller: Address): BigInt {
    let result = super.call(
      "pendingDepositRequest",
      "pendingDepositRequest(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(requestId),
        ethereum.Value.fromAddress(controller),
      ],
    );

    return result[0].toBigInt();
  }

  try_pendingDepositRequest(
    requestId: BigInt,
    controller: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pendingDepositRequest",
      "pendingDepositRequest(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(requestId),
        ethereum.Value.fromAddress(controller),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pendingOwner(): Address {
    let result = super.call("pendingOwner", "pendingOwner():(address)", []);

    return result[0].toAddress();
  }

  try_pendingOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("pendingOwner", "pendingOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingRedeemRequest(requestId: BigInt, controller: Address): BigInt {
    let result = super.call(
      "pendingRedeemRequest",
      "pendingRedeemRequest(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(requestId),
        ethereum.Value.fromAddress(controller),
      ],
    );

    return result[0].toBigInt();
  }

  try_pendingRedeemRequest(
    requestId: BigInt,
    controller: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pendingRedeemRequest",
      "pendingRedeemRequest(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(requestId),
        ethereum.Value.fromAddress(controller),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previewDeposit(param0: BigInt): BigInt {
    let result = super.call(
      "previewDeposit",
      "previewDeposit(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBigInt();
  }

  try_previewDeposit(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "previewDeposit",
      "previewDeposit(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previewMint(param0: BigInt): BigInt {
    let result = super.call("previewMint", "previewMint(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toBigInt();
  }

  try_previewMint(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "previewMint",
      "previewMint(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previewRedeem(param0: BigInt): BigInt {
    let result = super.call(
      "previewRedeem",
      "previewRedeem(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBigInt();
  }

  try_previewRedeem(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "previewRedeem",
      "previewRedeem(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previewWithdraw(param0: BigInt): BigInt {
    let result = super.call(
      "previewWithdraw",
      "previewWithdraw(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBigInt();
  }

  try_previewWithdraw(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "previewWithdraw",
      "previewWithdraw(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeem(shares: BigInt, receiver: Address, controller: Address): BigInt {
    let result = super.call(
      "redeem",
      "redeem(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(shares),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(controller),
      ],
    );

    return result[0].toBigInt();
  }

  try_redeem(
    shares: BigInt,
    receiver: Address,
    controller: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeem",
      "redeem(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(shares),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(controller),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  requestRedeem(shares: BigInt, controller: Address, owner: Address): BigInt {
    let result = super.call(
      "requestRedeem",
      "requestRedeem(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(shares),
        ethereum.Value.fromAddress(controller),
        ethereum.Value.fromAddress(owner),
      ],
    );

    return result[0].toBigInt();
  }

  try_requestRedeem(
    shares: BigInt,
    controller: Address,
    owner: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "requestRedeem",
      "requestRedeem(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(shares),
        ethereum.Value.fromAddress(controller),
        ethereum.Value.fromAddress(owner),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  safe(): Address {
    let result = super.call("safe", "safe():(address)", []);

    return result[0].toAddress();
  }

  try_safe(): ethereum.CallResult<Address> {
    let result = super.tryCall("safe", "safe():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  setOperator(operator: Address, approved: boolean): boolean {
    let result = super.call("setOperator", "setOperator(address,bool):(bool)", [
      ethereum.Value.fromAddress(operator),
      ethereum.Value.fromBoolean(approved),
    ]);

    return result[0].toBoolean();
  }

  try_setOperator(
    operator: Address,
    approved: boolean,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setOperator",
      "setOperator(address,bool):(bool)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromBoolean(approved),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  share(): Address {
    let result = super.call("share", "share():(address)", []);

    return result[0].toAddress();
  }

  try_share(): ethereum.CallResult<Address> {
    let result = super.tryCall("share", "share():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalAssets(): BigInt {
    let result = super.call("totalAssets", "totalAssets():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalAssets(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalAssets", "totalAssets():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, value: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value),
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, value: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
      ],
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    value: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  version(): string {
    let result = super.call("version", "version():(string)", []);

    return result[0].toString();
  }

  try_version(): ethereum.CallResult<string> {
    let result = super.tryCall("version", "version():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  withdraw(assets: BigInt, receiver: Address, controller: Address): BigInt {
    let result = super.call(
      "withdraw",
      "withdraw(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(assets),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(controller),
      ],
    );

    return result[0].toBigInt();
  }

  try_withdraw(
    assets: BigInt,
    receiver: Address,
    controller: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdraw",
      "withdraw(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(assets),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(controller),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get disable(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall extends ethereum.Call {
  get inputs(): AcceptOwnershipCall__Inputs {
    return new AcceptOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptOwnershipCall__Outputs {
    return new AcceptOwnershipCall__Outputs(this);
  }
}

export class AcceptOwnershipCall__Inputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall__Outputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AddToWhitelistCall extends ethereum.Call {
  get inputs(): AddToWhitelistCall__Inputs {
    return new AddToWhitelistCall__Inputs(this);
  }

  get outputs(): AddToWhitelistCall__Outputs {
    return new AddToWhitelistCall__Outputs(this);
  }
}

export class AddToWhitelistCall__Inputs {
  _call: AddToWhitelistCall;

  constructor(call: AddToWhitelistCall) {
    this._call = call;
  }

  get accounts(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class AddToWhitelistCall__Outputs {
  _call: AddToWhitelistCall;

  constructor(call: AddToWhitelistCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CancelRequestDepositCall extends ethereum.Call {
  get inputs(): CancelRequestDepositCall__Inputs {
    return new CancelRequestDepositCall__Inputs(this);
  }

  get outputs(): CancelRequestDepositCall__Outputs {
    return new CancelRequestDepositCall__Outputs(this);
  }
}

export class CancelRequestDepositCall__Inputs {
  _call: CancelRequestDepositCall;

  constructor(call: CancelRequestDepositCall) {
    this._call = call;
  }
}

export class CancelRequestDepositCall__Outputs {
  _call: CancelRequestDepositCall;

  constructor(call: CancelRequestDepositCall) {
    this._call = call;
  }
}

export class ClaimSharesAndRequestRedeemCall extends ethereum.Call {
  get inputs(): ClaimSharesAndRequestRedeemCall__Inputs {
    return new ClaimSharesAndRequestRedeemCall__Inputs(this);
  }

  get outputs(): ClaimSharesAndRequestRedeemCall__Outputs {
    return new ClaimSharesAndRequestRedeemCall__Outputs(this);
  }
}

export class ClaimSharesAndRequestRedeemCall__Inputs {
  _call: ClaimSharesAndRequestRedeemCall;

  constructor(call: ClaimSharesAndRequestRedeemCall) {
    this._call = call;
  }

  get sharesToRedeem(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimSharesAndRequestRedeemCall__Outputs {
  _call: ClaimSharesAndRequestRedeemCall;

  constructor(call: ClaimSharesAndRequestRedeemCall) {
    this._call = call;
  }

  get requestId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ClaimSharesOnBehalfCall extends ethereum.Call {
  get inputs(): ClaimSharesOnBehalfCall__Inputs {
    return new ClaimSharesOnBehalfCall__Inputs(this);
  }

  get outputs(): ClaimSharesOnBehalfCall__Outputs {
    return new ClaimSharesOnBehalfCall__Outputs(this);
  }
}

export class ClaimSharesOnBehalfCall__Inputs {
  _call: ClaimSharesOnBehalfCall;

  constructor(call: ClaimSharesOnBehalfCall) {
    this._call = call;
  }

  get controllers(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class ClaimSharesOnBehalfCall__Outputs {
  _call: ClaimSharesOnBehalfCall;

  constructor(call: ClaimSharesOnBehalfCall) {
    this._call = call;
  }
}

export class CloseCall extends ethereum.Call {
  get inputs(): CloseCall__Inputs {
    return new CloseCall__Inputs(this);
  }

  get outputs(): CloseCall__Outputs {
    return new CloseCall__Outputs(this);
  }
}

export class CloseCall__Inputs {
  _call: CloseCall;

  constructor(call: CloseCall) {
    this._call = call;
  }

  get _newTotalAssets(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CloseCall__Outputs {
  _call: CloseCall;

  constructor(call: CloseCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get assets(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get controller(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class Deposit1Call extends ethereum.Call {
  get inputs(): Deposit1Call__Inputs {
    return new Deposit1Call__Inputs(this);
  }

  get outputs(): Deposit1Call__Outputs {
    return new Deposit1Call__Outputs(this);
  }
}

export class Deposit1Call__Inputs {
  _call: Deposit1Call;

  constructor(call: Deposit1Call) {
    this._call = call;
  }

  get assets(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class Deposit1Call__Outputs {
  _call: Deposit1Call;

  constructor(call: Deposit1Call) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DisableWhitelistCall extends ethereum.Call {
  get inputs(): DisableWhitelistCall__Inputs {
    return new DisableWhitelistCall__Inputs(this);
  }

  get outputs(): DisableWhitelistCall__Outputs {
    return new DisableWhitelistCall__Outputs(this);
  }
}

export class DisableWhitelistCall__Inputs {
  _call: DisableWhitelistCall;

  constructor(call: DisableWhitelistCall) {
    this._call = call;
  }
}

export class DisableWhitelistCall__Outputs {
  _call: DisableWhitelistCall;

  constructor(call: DisableWhitelistCall) {
    this._call = call;
  }
}

export class ExpireTotalAssetsCall extends ethereum.Call {
  get inputs(): ExpireTotalAssetsCall__Inputs {
    return new ExpireTotalAssetsCall__Inputs(this);
  }

  get outputs(): ExpireTotalAssetsCall__Outputs {
    return new ExpireTotalAssetsCall__Outputs(this);
  }
}

export class ExpireTotalAssetsCall__Inputs {
  _call: ExpireTotalAssetsCall;

  constructor(call: ExpireTotalAssetsCall) {
    this._call = call;
  }
}

export class ExpireTotalAssetsCall__Outputs {
  _call: ExpireTotalAssetsCall;

  constructor(call: ExpireTotalAssetsCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get data(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get feeRegistry(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get wrappedNativeToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitiateClosingCall extends ethereum.Call {
  get inputs(): InitiateClosingCall__Inputs {
    return new InitiateClosingCall__Inputs(this);
  }

  get outputs(): InitiateClosingCall__Outputs {
    return new InitiateClosingCall__Outputs(this);
  }
}

export class InitiateClosingCall__Inputs {
  _call: InitiateClosingCall;

  constructor(call: InitiateClosingCall) {
    this._call = call;
  }
}

export class InitiateClosingCall__Outputs {
  _call: InitiateClosingCall;

  constructor(call: InitiateClosingCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get shares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class Mint1Call extends ethereum.Call {
  get inputs(): Mint1Call__Inputs {
    return new Mint1Call__Inputs(this);
  }

  get outputs(): Mint1Call__Outputs {
    return new Mint1Call__Outputs(this);
  }
}

export class Mint1Call__Inputs {
  _call: Mint1Call;

  constructor(call: Mint1Call) {
    this._call = call;
  }

  get shares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get controller(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class Mint1Call__Outputs {
  _call: Mint1Call;

  constructor(call: Mint1Call) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get shares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get controller(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get assets(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RequestDepositCall extends ethereum.Call {
  get inputs(): RequestDepositCall__Inputs {
    return new RequestDepositCall__Inputs(this);
  }

  get outputs(): RequestDepositCall__Outputs {
    return new RequestDepositCall__Outputs(this);
  }
}

export class RequestDepositCall__Inputs {
  _call: RequestDepositCall;

  constructor(call: RequestDepositCall) {
    this._call = call;
  }

  get assets(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get controller(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class RequestDepositCall__Outputs {
  _call: RequestDepositCall;

  constructor(call: RequestDepositCall) {
    this._call = call;
  }

  get requestId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RequestDeposit1Call extends ethereum.Call {
  get inputs(): RequestDeposit1Call__Inputs {
    return new RequestDeposit1Call__Inputs(this);
  }

  get outputs(): RequestDeposit1Call__Outputs {
    return new RequestDeposit1Call__Outputs(this);
  }
}

export class RequestDeposit1Call__Inputs {
  _call: RequestDeposit1Call;

  constructor(call: RequestDeposit1Call) {
    this._call = call;
  }

  get assets(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get controller(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get referral(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class RequestDeposit1Call__Outputs {
  _call: RequestDeposit1Call;

  constructor(call: RequestDeposit1Call) {
    this._call = call;
  }

  get requestId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RequestRedeemCall extends ethereum.Call {
  get inputs(): RequestRedeemCall__Inputs {
    return new RequestRedeemCall__Inputs(this);
  }

  get outputs(): RequestRedeemCall__Outputs {
    return new RequestRedeemCall__Outputs(this);
  }
}

export class RequestRedeemCall__Inputs {
  _call: RequestRedeemCall;

  constructor(call: RequestRedeemCall) {
    this._call = call;
  }

  get shares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get controller(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class RequestRedeemCall__Outputs {
  _call: RequestRedeemCall;

  constructor(call: RequestRedeemCall) {
    this._call = call;
  }

  get requestId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RevokeFromWhitelistCall extends ethereum.Call {
  get inputs(): RevokeFromWhitelistCall__Inputs {
    return new RevokeFromWhitelistCall__Inputs(this);
  }

  get outputs(): RevokeFromWhitelistCall__Outputs {
    return new RevokeFromWhitelistCall__Outputs(this);
  }
}

export class RevokeFromWhitelistCall__Inputs {
  _call: RevokeFromWhitelistCall;

  constructor(call: RevokeFromWhitelistCall) {
    this._call = call;
  }

  get accounts(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class RevokeFromWhitelistCall__Outputs {
  _call: RevokeFromWhitelistCall;

  constructor(call: RevokeFromWhitelistCall) {
    this._call = call;
  }
}

export class SetOperatorCall extends ethereum.Call {
  get inputs(): SetOperatorCall__Inputs {
    return new SetOperatorCall__Inputs(this);
  }

  get outputs(): SetOperatorCall__Outputs {
    return new SetOperatorCall__Outputs(this);
  }
}

export class SetOperatorCall__Inputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetOperatorCall__Outputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SettleDepositCall extends ethereum.Call {
  get inputs(): SettleDepositCall__Inputs {
    return new SettleDepositCall__Inputs(this);
  }

  get outputs(): SettleDepositCall__Outputs {
    return new SettleDepositCall__Outputs(this);
  }
}

export class SettleDepositCall__Inputs {
  _call: SettleDepositCall;

  constructor(call: SettleDepositCall) {
    this._call = call;
  }

  get _newTotalAssets(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SettleDepositCall__Outputs {
  _call: SettleDepositCall;

  constructor(call: SettleDepositCall) {
    this._call = call;
  }
}

export class SettleRedeemCall extends ethereum.Call {
  get inputs(): SettleRedeemCall__Inputs {
    return new SettleRedeemCall__Inputs(this);
  }

  get outputs(): SettleRedeemCall__Outputs {
    return new SettleRedeemCall__Outputs(this);
  }
}

export class SettleRedeemCall__Inputs {
  _call: SettleRedeemCall;

  constructor(call: SettleRedeemCall) {
    this._call = call;
  }

  get _newTotalAssets(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SettleRedeemCall__Outputs {
  _call: SettleRedeemCall;

  constructor(call: SettleRedeemCall) {
    this._call = call;
  }
}

export class SyncDepositCall extends ethereum.Call {
  get inputs(): SyncDepositCall__Inputs {
    return new SyncDepositCall__Inputs(this);
  }

  get outputs(): SyncDepositCall__Outputs {
    return new SyncDepositCall__Outputs(this);
  }
}

export class SyncDepositCall__Inputs {
  _call: SyncDepositCall;

  constructor(call: SyncDepositCall) {
    this._call = call;
  }

  get assets(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get referral(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SyncDepositCall__Outputs {
  _call: SyncDepositCall;

  constructor(call: SyncDepositCall) {
    this._call = call;
  }

  get shares(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateFeeReceiverCall extends ethereum.Call {
  get inputs(): UpdateFeeReceiverCall__Inputs {
    return new UpdateFeeReceiverCall__Inputs(this);
  }

  get outputs(): UpdateFeeReceiverCall__Outputs {
    return new UpdateFeeReceiverCall__Outputs(this);
  }
}

export class UpdateFeeReceiverCall__Inputs {
  _call: UpdateFeeReceiverCall;

  constructor(call: UpdateFeeReceiverCall) {
    this._call = call;
  }

  get _feeReceiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateFeeReceiverCall__Outputs {
  _call: UpdateFeeReceiverCall;

  constructor(call: UpdateFeeReceiverCall) {
    this._call = call;
  }
}

export class UpdateNewTotalAssetsCall extends ethereum.Call {
  get inputs(): UpdateNewTotalAssetsCall__Inputs {
    return new UpdateNewTotalAssetsCall__Inputs(this);
  }

  get outputs(): UpdateNewTotalAssetsCall__Outputs {
    return new UpdateNewTotalAssetsCall__Outputs(this);
  }
}

export class UpdateNewTotalAssetsCall__Inputs {
  _call: UpdateNewTotalAssetsCall;

  constructor(call: UpdateNewTotalAssetsCall) {
    this._call = call;
  }

  get _newTotalAssets(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateNewTotalAssetsCall__Outputs {
  _call: UpdateNewTotalAssetsCall;

  constructor(call: UpdateNewTotalAssetsCall) {
    this._call = call;
  }
}

export class UpdateRatesCall extends ethereum.Call {
  get inputs(): UpdateRatesCall__Inputs {
    return new UpdateRatesCall__Inputs(this);
  }

  get outputs(): UpdateRatesCall__Outputs {
    return new UpdateRatesCall__Outputs(this);
  }
}

export class UpdateRatesCall__Inputs {
  _call: UpdateRatesCall;

  constructor(call: UpdateRatesCall) {
    this._call = call;
  }

  get newRates(): UpdateRatesCallNewRatesStruct {
    return changetype<UpdateRatesCallNewRatesStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class UpdateRatesCall__Outputs {
  _call: UpdateRatesCall;

  constructor(call: UpdateRatesCall) {
    this._call = call;
  }
}

export class UpdateRatesCallNewRatesStruct extends ethereum.Tuple {
  get managementRate(): i32 {
    return this[0].toI32();
  }

  get performanceRate(): i32 {
    return this[1].toI32();
  }
}

export class UpdateTotalAssetsLifespanCall extends ethereum.Call {
  get inputs(): UpdateTotalAssetsLifespanCall__Inputs {
    return new UpdateTotalAssetsLifespanCall__Inputs(this);
  }

  get outputs(): UpdateTotalAssetsLifespanCall__Outputs {
    return new UpdateTotalAssetsLifespanCall__Outputs(this);
  }
}

export class UpdateTotalAssetsLifespanCall__Inputs {
  _call: UpdateTotalAssetsLifespanCall;

  constructor(call: UpdateTotalAssetsLifespanCall) {
    this._call = call;
  }

  get lifespan(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateTotalAssetsLifespanCall__Outputs {
  _call: UpdateTotalAssetsLifespanCall;

  constructor(call: UpdateTotalAssetsLifespanCall) {
    this._call = call;
  }
}

export class UpdateValuationManagerCall extends ethereum.Call {
  get inputs(): UpdateValuationManagerCall__Inputs {
    return new UpdateValuationManagerCall__Inputs(this);
  }

  get outputs(): UpdateValuationManagerCall__Outputs {
    return new UpdateValuationManagerCall__Outputs(this);
  }
}

export class UpdateValuationManagerCall__Inputs {
  _call: UpdateValuationManagerCall;

  constructor(call: UpdateValuationManagerCall) {
    this._call = call;
  }

  get _valuationManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateValuationManagerCall__Outputs {
  _call: UpdateValuationManagerCall;

  constructor(call: UpdateValuationManagerCall) {
    this._call = call;
  }
}

export class UpdateWhitelistManagerCall extends ethereum.Call {
  get inputs(): UpdateWhitelistManagerCall__Inputs {
    return new UpdateWhitelistManagerCall__Inputs(this);
  }

  get outputs(): UpdateWhitelistManagerCall__Outputs {
    return new UpdateWhitelistManagerCall__Outputs(this);
  }
}

export class UpdateWhitelistManagerCall__Inputs {
  _call: UpdateWhitelistManagerCall;

  constructor(call: UpdateWhitelistManagerCall) {
    this._call = call;
  }

  get _whitelistManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateWhitelistManagerCall__Outputs {
  _call: UpdateWhitelistManagerCall;

  constructor(call: UpdateWhitelistManagerCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get assets(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get controller(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get shares(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
